{"version":3,"file":"static/js/133.a629b686.chunk.js","mappings":"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","sources":["components/AuthForm/AuthForm.jsx","pages/SignUpPage/index.jsx","schema/yupPhoneValidation.js","schema/yupPasswordValidation.js","schema/yupEmailValidation.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { yupEmailValidation, yupPasswordValidation } from 'schema';\nimport { toast } from \"react-toastify\";\nimport { FaUserPlus, FaRegEye } from \"react-icons/fa\";\nimport { MdAttachEmail } from \"react-icons/md\";\nimport { Label, \n         PrimaryButton, \n         ShowPasswordButton, \n         FormError, \n         StyledForm, \n         FormInput, \n         InputWrapper} from \"components/ui\";\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\n\nexport const AuthForm = ({onSubmit, type, error, register = false}) => {\n  const [passwordShown, setPasswordShown] = useState(false);\n\n  useEffect(() => {\n    if (error?.status === 400) {\n      if(error?.data?.name === \"MongoError\") toast.error(`User already exists! Try again!`);\n      if(error?.data?.message) toast.error(`${error?.data?.message}`);\n      if(!register)toast.error(`Incorrect email or password. Try again!`);\n    };\n    if (error?.status === 404) toast.error(`Ð¡onnection error 404! Try later!`);\n    if (error?.status === 500) toast.error(`Server error! Try again!`);\n  }, [error, register]);\n  \n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n      \n  const schema = register ? \n  yup.object({\n    ...yupPasswordValidation,\n    ...yupEmailValidation,\n    name: yup.string().required('Please, enter your name'),\n  }) : \n  yup.object({\n    ...yupPasswordValidation,\n    ...yupEmailValidation,\n  });\n    \n  const togglePassword = () => {\n    setPasswordShown(!passwordShown);\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={onSubmit}>\n        <StyledForm noValidate>\n          {register && (\n            <>\n              <Label htmlFor='name'><FaUserPlus/>Name</Label>\n              <FormInput type='name' name='name'/>\n              <FormError name=\"name\"/>\n            </>\n          )}\n            <Label htmlFor='email'><MdAttachEmail/>Email</Label>\n            <FormInput type='email' name='email'/>\n            <FormError name=\"email\"/>\n            <Label htmlFor='password'>Password</Label>\n            <InputWrapper>\n              <FormInput type={passwordShown ? 'text' : 'password'} name=\"password\"/>\n                <OverlayTrigger\n                placement=\"top\"\n                overlay={<Tooltip id=\"password button tooltip\">show password</Tooltip>}>\n                  <ShowPasswordButton\n                    onClick={togglePassword}\n                    type=\"button\">\n                    <FaRegEye size={30} />\n                  </ShowPasswordButton>\n                </OverlayTrigger>\n            </InputWrapper>\n            <FormError name=\"password\"/>\n            <PrimaryButton type='submit'>\n              {type}\n            </PrimaryButton>  \n        </StyledForm>\n    </Formik>\n  );\n};\n\n\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport authSlice from \"redux/auth/authSlice\";\nimport { useRegisterUserMutation } from \"redux/phonebookApiQuery\";\nimport { AuthForm } from \"components/AuthForm\";\nimport { FormPageContainer, FormWrapper, Title } from \"components/ui\";\n\n\nconst SignUpPage = () => { \nconst [ registerUser, {data: registerData, error}] = useRegisterUserMutation();\nconst dispatch = useDispatch();\n\nuseEffect(() => {\n  if (registerData?.user) dispatch(authSlice.actions.signin(registerData));\n}, [registerData, dispatch]);\n\nconst handleSubmit = (values, {resetForm}) => {\n  registerUser(values);\n  resetForm();\n};\n\nreturn (\n  <FormPageContainer>\n    <FormWrapper>\n      <Title>Create your free account!</Title>\n      <AuthForm onSubmit={handleSubmit} error={error} register={true} type={'Sign Up'} />\n    </FormWrapper>\n  </FormPageContainer> \n  );\n};\n\nexport default SignUpPage;","import * as yup from 'yup';\n\nexport const yupPhoneValidation = ({\n  number: yup.string().required().test({\n      test: (value) => (/^[\\d+][\\d()-]{8,16}\\d$/i).test(value),\n  }),\n});\n\n","import * as yup from 'yup';\n\nexport const yupPasswordValidation = ({\n  password: yup\n    .string()\n    .required('Please, enter your password')\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,24}$/,\n      \"Must contain 8 or more characters: uppercase, lowercase letters, a number and a special case character\"\n  ),\n});\n\n","import * as yup from 'yup';\n\nexport const yupEmailValidation = ({\n    email: yup.string().email('Invalid email address format').required('Please, enter your email')\n});"],"names":["AuthForm","onSubmit","type","error","register","useState","passwordShown","setPasswordShown","useEffect","status","data","name","toast","message","schema","yup","yupPasswordValidation","yupEmailValidation","required","initialValues","email","password","validationSchema","noValidate","htmlFor","OverlayTrigger","placement","overlay","Tooltip","id","onClick","size","useRegisterUserMutation","registerUser","registerData","dispatch","useDispatch","user","authSlice","values","resetForm","yupPhoneValidation","number","test","value","matches"],"sourceRoot":""}
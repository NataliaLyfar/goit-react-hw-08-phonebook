{"version":3,"file":"static/js/650.e19a63e2.chunk.js","mappings":"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","sources":["components/ContactForm/PhoneInputField/PhoneInputField.jsx","components/ContactForm/ContactForm.jsx","components/ContactForm/UpdateForm.jsx","pages/UpdatePage/index.jsx","schema/yupPhoneValidation.js","schema/yupPasswordValidation.js"],"sourcesContent":["import PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport PropTypes from 'prop-types';\n\n\nexport const PhoneInputField = (props) => {\n    const {\n      field: { name, value },\n      form: {\n        setFieldValue, \n      },\n      country,\n      onChange,\n    } = props;\n  \n    const onValueChange = (phoneNumber) => {\n      setFieldValue(name, phoneNumber);\n  \n      if (onChange !== null) {\n        onChange(phoneNumber);\n      }\n    };\n  \n    return (\n        <PhoneInput\n          placeholder=\"Enter phone number\"\n          name={name}\n          value={value}\n          onChange={onValueChange}\n          country={country}\n          id=\"phoneInput\"\n        />\n    );\n  };\n  \n  PhoneInputField.propTypes = {\n    form: PropTypes.any.isRequired,\n    field: PropTypes.any.isRequired,\n    onChange: PropTypes.func,\n    country: PropTypes.string,\n  };\n  \n  PhoneInputField.defaultProps = {\n    className: '',\n    id: \"phoneInput\",\n    label: '',\n    onChange: null,\n    country: 'AU',\n    disabled: false,\n  };","import { Field, Formik } from 'formik';\nimport * as yup from 'yup';\nimport { yupPhoneValidation } from 'schema';\nimport { toast } from 'react-toastify';\nimport { FaUserPlus, FaPhoneAlt } from \"react-icons/fa\";\nimport { Label,\n         TertiaryButton, \n         FormError, \n         FormContact, \n         FormInput } from \"components/ui\";\nimport { \n  useCreateContactsMutation,\n  useGetContactsQuery,\n } from \"redux/contacts/contactsApi\";\nimport { PhoneInputField } from './PhoneInputField';\n\n\n\nexport const ContactForm = () => {\n  const [createContact, { isLoading }] = useCreateContactsMutation();\n  const { data } = useGetContactsQuery();\n\n  const initialValues = {\n    name: '',\n    number: ''\n  };\n  \n  const schema = yup.object({\n    ...yupPhoneValidation,\n    name: yup.string().required(),\n  });\n\n  const handleSubmit = (values, {resetForm}) => {\n    const isContactExist = data.find(({name}) => name.toLowerCase() === values.name.toLowerCase());\n    if(isContactExist){\n      return toast.info(`${values.name} is already in contacts`);\n    };\n    createContact(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}>\n        <FormContact>\n            <Label htmlFor='name'><FaUserPlus/>Name</Label>\n            <FormInput type='text' name='name'/>\n            <FormError name=\"name\"/>\n            <Label htmlFor='number'><FaPhoneAlt/>Number</Label>\n            <Field\n            type=\"tel\" name=\"number\" country={'ua'} regions={'europe'}\n            component={PhoneInputField}\n            />\n            <FormError name=\"number\"/>\n            <TertiaryButton type='submit' disabled={isLoading}>\n              Add contact\n            </TertiaryButton>\n        </FormContact>\n    </Formik>\n  );\n};\n\n\n\n","import { useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { Field, Formik } from 'formik';\nimport * as yup from 'yup';\nimport { yupPhoneValidation } from 'schema';\nimport { toast } from 'react-toastify';\nimport { FaUserPlus, FaPhoneAlt } from \"react-icons/fa\";\nimport { Label, \n         PrimaryButton, \n         FormError, \n         FormContact, \n         FormInput } from \"components/ui\";\nimport { \n  useUpdateContactMutation,\n  useGetContactsQuery,\n } from \"redux/contacts/contactsApi\";\nimport { PhoneInputField } from './PhoneInputField';\n\n\nexport const UpdateForm = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { id } = useParams();\n  const [url, setUrl] = useState(location.state.from);\n  const [updateContact, { isLoading }] = useUpdateContactMutation();\n  const { data } = useGetContactsQuery();\n\n  const initialValues = {\n    name: '',\n    number: ''\n  };\n  \n  const schema = yup.object({\n    ...yupPhoneValidation,\n    name: yup.string().required(),\n  });\n\n  const handleSubmit = (values, {resetForm}) => {\n    const isContactExist = data.find(({name}) => name.toLowerCase() === values.name.toLowerCase());\n    if(isContactExist){\n      return toast.info(`${values.name} is already in contacts`);\n    };\n    updateContact({id, ...values});\n    setUrl(null);\n    navigate(url);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}>  \n        <FormContact>\n            <Label htmlFor='name'><FaUserPlus/>Name</Label>\n            <FormInput type='text' name='name'/>\n            <FormError name=\"name\"/>\n            <Label htmlFor='number'><FaPhoneAlt/>Number</Label>\n            <Field\n            type=\"tel\" name=\"number\" country={'ua'} regions={'europe'}\n            component={PhoneInputField}\n            />\n            <FormError name=\"number\"/>\n            <PrimaryButton type='submit'\n             disabled={isLoading}\n             aria-label=\"update contact button\">\n              Update contact\n            </PrimaryButton>\n        </FormContact>\n    </Formik>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { UpdateForm } from \"components/ContactForm\";\nimport { SecondaryButton } from \"components/ui\";\nimport { FormPageContainer, UpdateFormWrapper } from \"components/ui\";\nimport { BsFillArrowLeftCircleFill } from \"react-icons/bs\";\n\n\nconst UpdatePage  = () => {\n  const [backLocation, setBackLocation] = useState(null);\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (backLocation === null) {\n      setBackLocation(location?.state?.from ?? '/');\n    };\n  }, [backLocation, location?.state?.from]);\n    \n  const onGoBack = () => {\n    navigate(backLocation);\n  };\n\n  return (\n    <FormPageContainer>\n      <UpdateFormWrapper>\n        <SecondaryButton onClick={onGoBack}><BsFillArrowLeftCircleFill/></SecondaryButton>\n        <UpdateForm/>\n      </UpdateFormWrapper>\n    </FormPageContainer>\n  );\n};\n\n\nexport default UpdatePage;","import * as yup from 'yup';\n\nexport const yupPhoneValidation = ({\n  number: yup.string().required().test({\n      test: (value) => (/^[\\d+][\\d()-]{8,16}\\d$/i).test(value),\n  }),\n});\n\n","import * as yup from 'yup';\n\nexport const yupPasswordValidation = ({\n  password: yup\n    .string()\n    .required('Please, enter your password')\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,24}$/,\n      \"Must contain 8 and more characters: uppercase, lowercase letters, a number and a special case character\"\n  ),\n});\n\nexport const yupLoginPasswordValidation = ({\n  password: yup\n    .string()\n    .required('Please, enter your password')\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,24}$/,\n      `The password must match the registration's password.\n       Must contain 8 and more characters: uppercase, lowercase letters, a number and a special case character`\n  ),\n});\n"],"names":["PhoneInputField","props","field","name","value","setFieldValue","form","country","onChange","placeholder","phoneNumber","id","defaultProps","className","label","disabled","ContactForm","useCreateContactsMutation","createContact","isLoading","data","useGetContactsQuery","schema","yup","yupPhoneValidation","required","initialValues","number","validationSchema","onSubmit","values","resetForm","find","toLowerCase","toast","htmlFor","type","regions","component","UpdateForm","navigate","useNavigate","location","useLocation","useParams","useState","state","from","url","setUrl","useUpdateContactMutation","updateContact","backLocation","setBackLocation","useEffect","onClick","test","yupPasswordValidation","password","matches","yupLoginPasswordValidation"],"sourceRoot":""}
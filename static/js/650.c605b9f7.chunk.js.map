{"version":3,"file":"static/js/650.c605b9f7.chunk.js","mappings":"kPAcaA,EAAc,SAAC,GAA4D,IAA3DC,EAA0D,EAA1DA,aAAcC,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,UAA6B,IAAlBC,OAAAA,OAAkB,SAC/EC,EAASC,EAAAA,IAAA,kBACVC,EAAAA,IADU,IAEbC,KAAMF,EAAAA,KAAaG,cAGrB,OACE,SAAC,KAAD,CACEP,cAAeA,EACfQ,iBAAkBL,EAClBM,SAAUV,EAHZ,SAIK,gBAAEW,EAAF,EAAEA,OAAQC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,WAAxB,OACD,UAAC,KAAD,YACI,UAAC,KAAD,CAAOC,QAAQ,OAAf,WAAsB,SAAC,MAAD,IAAtB,WACA,SAAC,KAAD,CAAWC,KAAK,OAAOR,KAAK,UAC5B,SAAC,KAAD,CAAWA,KAAK,UAChB,UAAC,KAAD,CAAOO,QAAQ,SAAf,WAAwB,SAAC,MAAD,IAAxB,aACA,SAAC,IAAD,CACME,WAAY,CACVT,KAAM,UAERU,QAAS,KACTC,YAAY,GACZC,SAAU,SAACC,EAAaH,EAASI,GAC/BT,EAAaS,EACd,EACDC,OAAQT,EACRU,MAAOZ,EAAOa,UAEpB,SAAC,KAAD,CAAWjB,KAAK,WACfJ,GACC,SAAC,KAAD,CAAeY,KAAK,SAClBU,SAAUvB,EACV,aAAW,wBAFb,6BAMA,SAAC,KAAD,CAAgBuB,SAAUvB,EAAWa,KAAK,SAA1C,2BA1BL,GAmCR,C,2HCLD,UA3CoB,WAAO,IAAD,EAClBW,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAsBE,EAAAA,EAAAA,UAASJ,EAASK,MAAMC,MAA9C,eAAOC,EAAP,KAAYC,EAAZ,KACA,GAAuCC,EAAAA,EAAAA,MAAvC,eAAOC,EAAP,KAAwBpC,EAAxB,KAAwBA,UACVqC,GAAaC,EAAAA,EAAAA,MAAnBC,KACFC,EAAQH,EAASI,WAAU,SAAAC,GAAO,OAAId,IAAOc,EAAQd,EAAnB,IACxC,GAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOa,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,IACO,OAAjBF,GAAuBC,EAAe,iBAAClB,QAAD,IAACA,GAAD,UAACA,EAAUK,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,IACrE,GAAE,CAACW,EAAD,OAAejB,QAAf,IAAeA,GAAf,UAAeA,EAAUK,aAAzB,aAAe,EAAiBC,OAEnC,IAEMjC,EAAc,CAClBM,KAAMgC,EAASG,GAAOnC,KACtBiB,OAAQe,EAASG,GAAOlB,QAU1B,OACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAiBwB,QAjBN,kBAAMtB,EAASmB,EAAf,EAiBX,UAAoC,SAAC,MAAD,OACpC,SAAC,IAAD,CACE7C,aAZa,SAACW,EAAD,GAA0B,IAAhBsC,EAAe,EAAfA,UAC7BX,GAAc,QAACR,GAAAA,GAAOnB,IACtByB,EAAO,MACPV,EAASS,GACTc,GACD,EAQOhD,cAAeA,EACfC,UAAWA,EACXC,QAAQ,QAIjB,C,sHClDYG,EAAsB,CACjCkB,OAAQnB,EAAAA,KAAaG,WAAW0C,IAAI,GAAGC,IAAI,KCDhCC,EAAyB,CACpCC,SAAUhD,EAAAA,KAEPG,SAAS,+BACT8C,QACC,mEACA,2GCNOC,EAAsB,CAC/BC,MAAOnD,EAAAA,KAAamD,MAAM,gCAAgChD,SAAS,4B","sources":["components/ContactForm/ContactForm.jsx","pages/UpdatePage/index.jsx","schema/yupPhoneValidation.js","schema/yupPasswordValidation.js","schema/yupEmailValidation.js"],"sourcesContent":["import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { yupPhoneValidation } from 'schema';\nimport { FaUserPlus, FaPhoneAlt } from \"react-icons/fa\";\nimport { Label,\n         TertiaryButton,\n         PrimaryButton, \n         FormError, \n         StyledForm, \n         FormInput } from \"components/ui\";\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\n\n\nexport const ContactForm = ({handleSubmit, initialValues, isLoading, update=false}) => {\n  const schema = yup.object({\n    ...yupPhoneValidation,\n    name: yup.string().required(),\n  });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}>\n        {({values, handleChange, handleBlur}) => (\n        <StyledForm>\n            <Label htmlFor='name'><FaUserPlus/>Name</Label>\n            <FormInput type='text' name='name'/>\n            <FormError name=\"name\"/>\n            <Label htmlFor='number'><FaPhoneAlt/>Number</Label>\n            <PhoneInput\n                  inputProps={{\n                    name: 'number',\n                  }}\n                  country={'ua'}\n                  placeholder=''\n                  onChange={(phoneNumber, country, e) => {\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  value={values.number}\n                />\n            <FormError name=\"number\"/>\n            {update ? (\n              <PrimaryButton type='submit'\n                disabled={isLoading}\n                aria-label=\"update contact button\">\n                Update contact\n              </PrimaryButton>\n            ) : (\n              <TertiaryButton disabled={isLoading} type='submit'>\n                Add contact\n              </TertiaryButton>\n            )\n          }\n        </StyledForm>\n        )}\n    </Formik>\n  );\n};\n\n\n\n","import { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { ContactForm } from \"components/ContactForm\";\nimport { SecondaryButton } from \"components/ui\";\nimport { FormPageContainer, UpdateFormWrapper } from \"components/ui\";\nimport { BsFillArrowLeftCircleFill } from \"react-icons/bs\";\nimport { \n  useUpdateContactMutation,\n  useGetContactsQuery,\n } from \"redux/phonebookApiQuery\";\n\n\nconst UpdatePage  = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { id } = useParams();\n  const [url, setUrl] = useState(location.state.from);\n  const [updateContact, { isLoading }] = useUpdateContactMutation();\n  const { data: contacts } = useGetContactsQuery();\n  const index = contacts.findIndex(contact => id === contact.id);\n  const [backLocation, setBackLocation] = useState(null);\n\n  useEffect(() => {\n    if (backLocation === null) setBackLocation(location?.state?.from ?? '/');\n  }, [backLocation, location?.state?.from]);\n    \n  const onGoBack = () => navigate(backLocation);\n\n  const initialValues={\n    name: contacts[index].name,\n    number: contacts[index].number\n  };\n\n  const handleSubmit = (values, {resetForm}) => {\n    updateContact({id, ...values});\n    setUrl(null);\n    navigate(url);\n    resetForm();\n  };\n\n  return (\n    <FormPageContainer>\n      <UpdateFormWrapper>\n        <SecondaryButton onClick={onGoBack}><BsFillArrowLeftCircleFill/></SecondaryButton>\n        <ContactForm \n          handleSubmit={handleSubmit}\n          initialValues={initialValues}\n          isLoading={isLoading}\n          update={true}/>\n      </UpdateFormWrapper>\n    </FormPageContainer>\n  );\n};\n\n\nexport default UpdatePage;","import * as yup from 'yup';\n\nexport const yupPhoneValidation = ({\n  number: yup.string().required().min(5).max(30),\n});\n\n","import * as yup from 'yup';\n\nexport const yupPasswordValidation = ({\n  password: yup\n    .string()\n    .required('Please, enter your password')\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,24}$/,\n      \"Must contain 8 or more characters: uppercase, lowercase letters, a number and a special case character\"\n  ),\n});\n\n","import * as yup from 'yup';\n\nexport const yupEmailValidation = ({\n    email: yup.string().email('Invalid email address format').required('Please, enter your email')\n});"],"names":["ContactForm","handleSubmit","initialValues","isLoading","update","schema","yup","yupPhoneValidation","name","required","validationSchema","onSubmit","values","handleChange","handleBlur","htmlFor","type","inputProps","country","placeholder","onChange","phoneNumber","e","onBlur","value","number","disabled","navigate","useNavigate","location","useLocation","id","useParams","useState","state","from","url","setUrl","useUpdateContactMutation","updateContact","contacts","useGetContactsQuery","data","index","findIndex","contact","backLocation","setBackLocation","useEffect","onClick","resetForm","min","max","yupPasswordValidation","password","matches","yupEmailValidation","email"],"sourceRoot":""}